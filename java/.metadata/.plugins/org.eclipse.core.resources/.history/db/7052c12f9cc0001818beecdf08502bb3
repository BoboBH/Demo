package com.bobo.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.bobo.bean.JsonResult;
import com.bobo.bean.User;
import com.bobo.dao.UserDao;

import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;

@ComponentScan("com.bobo.dao")
@RestController
public class UserController {

	@Autowired
	private UserDao userDao;
	
	/**
	 * 
	 * @param id
	 * @return
	 */
	@ApiOperation(value="获取用户详细信息", notes = "根据URL中的Id来获取用户的详细信息")
	@ApiImplicitParams(value="用户id")
	@RequestMapping(value="/testuser/{id}", method = RequestMethod.GET)
	public ResponseEntity<JsonResult> getUserById(@PathVariable(value="id") int id){
		
		try{
			User user = this.userDao.getUserById(id);
			return ResponseEntity.ok(new JsonResult(user));
			
		}
		catch(Exception ex){
			return ResponseEntity.ok(new JsonResult(-1, "System Error:" + ex.getMessage()));
		}
	}

	@RequestMapping(value="/testusers", method = RequestMethod.GET)
	public ResponseEntity<JsonResult> getUserList(){
		try{
			List<User> list = this.userDao.getUserList();
			return ResponseEntity.ok(new JsonResult(list));			
		}
		catch(Exception ex){
			return ResponseEntity.ok(new JsonResult(-1, "System Error:" + ex.getMessage()));
		}
	}
	
	@RequestMapping(value="/testuser/{id}", method = RequestMethod.POST)
	public ResponseEntity<JsonResult> update(@PathVariable(value="id") int id, @RequestBody User user){
		try{
			
			 int result = this.userDao.update(id, user);
			 if(result >= 0)			
				 return ResponseEntity.ok(new JsonResult(0, "Update user successfully"));
			 else
				 return ResponseEntity.ok(new JsonResult(0, "Can not update user"));
		}
		catch(Exception ex){
			return ResponseEntity.ok(new JsonResult(-1, "System Error:" + ex.getMessage()));
		}
	}
	
	@RequestMapping(value="/testuser", method = RequestMethod.POST)
	public ResponseEntity<JsonResult> add(@RequestBody User user){
		try{
			
			 int result = this.userDao.add(user);
			 if(result >= 0)			
				 return ResponseEntity.ok(new JsonResult(0, "Add user successfully"));
			 else
				 return ResponseEntity.ok(new JsonResult(0, "Can not add user"));
		}
		catch(Exception ex){
			return ResponseEntity.ok(new JsonResult(-1, "System Error:" + ex.getMessage()));
		}
	}
	

	
	@RequestMapping(value="/testuser/{id}", method = RequestMethod.DELETE)
	public ResponseEntity<JsonResult> delete(@PathVariable(value="id") int id){
		try{
			
			 int result = this.userDao.delete(id);
			 if(result >= 0)			
				 return ResponseEntity.ok(new JsonResult(0, "Delete user successfully"));
			 else
				 return ResponseEntity.ok(new JsonResult(0, "Can not delete user"));
		}
		catch(Exception ex){
			return ResponseEntity.ok(new JsonResult(-1, "System Error:" + ex.getMessage()));
		}
	}
}
